# -*- coding: utf-8 -*-
"""TrainingNewModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PLCcyKdrU3SQdgLTQy2tMZtCd8Yf_Evo
"""

import torch
import matplotlib.pyplot as plt
from torch import nn
torch.__version__

device ="cuda" if torch.cuda.is_available() else "cpu" # Device Agnostic Setup
print(f"Using device {device}")

# Creating a dummy dataset using Linear Regression

bias=0.3
weight=0.7
X=torch.arange(0,1,0.02).unsqueeze(dim=1)
y=weight*X+bias
train_split=int(0.8*len(X))
x_train,y_train=X[:train_split],y[:train_split]
x_test,y_test=X[train_split:],y[train_split:]
len(x_train),len(y_train),len(x_test),len(y_test)


# Plotting Data
def plot(x_train,x_test,y_test,y_train, predictions=None):
  plt.figure(figsize=(10,7))
  plt.scatter(x_train, y_train, c="g",s=10, label="Training Data")
  plt.scatter(x_test, y_test, c="b", s=10, label="Testing Data")
  if predictions is not None:
    plt.scatter(y_test,predictions, c="r",s=10, label= "Predictions")
    plt.legend()
  plt.show()
plot(x_train,x_test,y_test,y_train)

# Building a model
class LinearRegressionModel(nn.Module):
  def __init__(self):
    super().__init__()
    self.linearlayer=nn.Linear(in_features=1,out_features=1)
  def forward(self,x:torch.Tensor)-> torch.Tensor:
    return self.linearlayer(x)
torch.manual_seed(42)
model_0=LinearRegressionModel()
model_0.state_dict()

device
next(model_0.parameters()).device
model_0.to(device)
next(model_0.parameters()).device

# Training Code
loss_fn=nn.L1Loss()
optimizer=torch.optim.SGD(params=model_0.parameters(),lr=0.01)
epochs=200
#Data Agnostic
x_train=x_train.to(device)
x_test=x_test.to(device)
y_train=y_train.to(device)
y_test=y_test.to(device)

for epoch in range(epochs):
  model_0.train()
  y_pred=model_0(x_train)
  loss=loss_fn(y_pred,y_train)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()
  #Testing
  model_0.eval()
  with torch.inference_mode():
    test_pred=model_0(x_test)
    test_loss=loss_fn(test_pred,y_test)
  if epoch %10==0:
    print(f"Epoch: {epoch} | Loss: {loss} | Test Loss: {test_loss}")

model_0.state_dict()

with torch.inference_mode():
  y_preds=model_0(x_test)
  y_preds

plot(predictions=y_preds.cpu(),x_train=x_train.cpu(),x_test=x_test.cpu(),y_train=y_train.cpu(),y_test=y_test.cpu())

#Saving and Loading
from pathlib import Path
MODEL_PATH=Path("models")
MODEL_PATH.mkdir(parents=True,exist_ok=True)

MODEL_NAME="Trained Another Model"
MODEL_SAVE_PATH=MODEL_PATH/MODEL_NAME
MODEL_SAVE_PATH
torch.save(obj=model_0.state_dict(),f=MODEL_SAVE_PATH)

