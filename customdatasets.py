# -*- coding: utf-8 -*-
"""CustomDatasets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u2XlWmzX45-uK3NIzm92uMtYDsbEOOEJ
"""

# Importing and Agnostic Code
import torch
from torch import nn
torch.__version__
device="cuda" if torch.cuda.is_available() else "cpu"
device

from os import RWF_APPEND
# Getting Data from zip file
import requests
import zipfile
from pathlib import Path
data_path=Path("data/")
image_path =data_path/ "pizza_steak_sushi"

if image_path.is_dir():
    print(f"{image_path} directory exists...")

else:
  print(f"{image_path} directory does not exist")
  image_path.mkdir(parents=True, exist_ok=True)

with open(data_path/"pizza_steak_sushi.zip","wb") as f :
  request = requests.get("https://github.com/mrdbourke/pytorch-deep-learning/raw/main/data/pizza_steak_sushi.zip")
  print("Downloading pizza, steak, sushi data...")
  f.write(request.content)

with zipfile.ZipFile(data_path/"pizza_steak_sushi.zip","r") as zip_ref:
  print("Unzipping pizza, steak, sushi data...")
  zip_ref.extractall(image_path)

# Converting Data in correct format
import os
def walk_through_dir(dir_path):
  for dirpath,dirnames,filenames in os.walk(dir_path):
    print(f"There is {len(dirnames)} directoies and {len(filenames)} images in {dirpath}")

walk_through_dir(image_path)

#Setup Train/Test Paths
train_dir=image_path/"train"
test_dir=image_path/"test"
train_dir , test_dir

# Visualizing Image using Code  (Pythons -> PIL Library )
import random
from PIL import Image
random.seed(42)
image_path_list=list(image_path.glob("*/*/*.jpg"))
image_path_list
random_image_path=random.choice(image_path_list)
print(random_image_path)

image_class=random_image_path.parent.stem
print(image_class)

image=Image.open(random_image_path)

print(f"Random Image Path{random_image_path}")
print(f"Image Class:{image_class}")
print(f"Image Size:{image.size}")
image

#Visualize using matplotlib
import matplotlib.pyplot as plt
import numpy as np
img_as_array=np.asarray(image)
plt.figure(figsize=(10,7))
plt.imshow(img_as_array)
plt.axis(False)

img_as_array

# Converting Array to Tensors and then torch.utils.data.datset
# then torch.dataloader
import torch
from torch.utils.data import DataLoader
from torchvision import datasets,transforms

data_transform= transforms.Compose([
    transforms.Resize((64,64)),
    transforms.RandomHorizontalFlip(p=0.5),
    transforms.ToTensor()
])

data_transform(image).shape

import random
import matplotlib.pyplot as plt
from PIL import Image
import torch

def random_seed(seed: int):
    random.seed(seed)
    torch.manual_seed(seed)

def plot_transformed_images(image_paths, transform, n=3, seed=42):
    if seed:
        random_seed(seed)
    random_image_paths = random.sample(image_paths, k=n)

    for image_path in random_image_paths:
        with Image.open(image_path) as f:
            fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))

            # Original image
            ax[0].imshow(f)
            ax[0].set_title(f"Original \nSize: {f.size}")
            ax[0].axis("off")

            # Transformed image
            transformed_image = transform(f)

            # If the transform returns a tensor, convert to numpy and permute
            if isinstance(transformed_image, torch.Tensor):
                transformed_image = transformed_image.permute(1, 2, 0)  # C,H,W -> H,W,C
                transformed_image = transformed_image.numpy()

            ax[1].imshow(transformed_image)
            if isinstance(transformed_image, torch.Tensor):
                size_info = tuple(transformed_image.shape)
            else:
                size_info = transformed_image.shape if hasattr(transformed_image, "shape") else f.size

            ax[1].set_title(f"Transformed \nSize: {size_info}")
            ax[1].axis("off")

            fig.suptitle(f"Class: {image_path.parent.stem}", fontsize=16)
            plt.show()


# Example call
plot_transformed_images(
    image_paths=image_path_list,
    transform=data_transform,
    n=3,
    seed=42
)

# Use image folder to createa datsets
from torchvision import datasets
train_data=datasets.ImageFolder(root=train_dir,transform=data_transform,target_transform=None)

test_data=datasets.ImageFolder(root=test_dir,transform=data_transform,target_transform=None)

train_data, test_data

train_dir,test_dir
# Get class name as a list
class_names=train_data.classes
class_names
# GET IT AS DICT
class_dict=train_data.class_to_idx
class_dict

len(train_data),len(test_data)

train_data[0]

import os
os.cpu_count()

#Creating a training and testing dataloader (it lets the dataset into iterables and we can keep it in batch size)
from torch.utils.data import DataLoader
BATCH_SIZE=1
train_dataloader=DataLoader(dataset=train_data,batch_size=BATCH_SIZE, num_workers=1,shuffle=True)
test_dataloader=DataLoader(dataset=test_data,batch_size=BATCH_SIZE, num_workers=1,shuffle=False)
train_dataloader,test_dataloader

len(train_dataloader),len(test_dataloader)

image_batch,label_batch=next(iter(train_dataloader))
image_batch.shape,label_batch.shape